/*************************************************************************
 *  Compilation:  javac RandomWalker.java
 *  Execution:    java RandomWalker 10
 *
 *  @author: Sarthak Uppal
 *
 * The program RandomWalker that takes an int command-line argument n
 * and simulates the motion of a random walk for n steps. Print the
 * location at each step (including the starting point), treating the
 * starting point as the origin (0, 0). Also, print the square of the
 * final Euclidean distance from the origin.
 *
 *  % java RandomWalker 10
 * (0,0)
 * (-1,0)
 * (-1,-1)
 * (-1,-2)
 * (-1,-3)
 * (-1,-4)
 * (-1,-5)
 * (0,-5)
 * (-1,-5)
 * (-2,-5)
 * (-2,-4)
 * Squared distance = 20.0
 *
 *************************************************************************/
 public class RandomWalker {

    public static void main(String[] args) {

    // WRITE YOUR CODE HERE
    int n = Integer.parseInt(args[0]);
    int xVal= 0;
    int yVal= 0;
    int step = 0;
    double SqrDis = 0;
    System.out.println("(" + xVal + "," + yVal + ")");

    for(int i = 0; i < n; i++){
        // step = (int)(Math.random()*4) +1;
        step = (int)(Math.random()*4) +1;

        if(step == 1){
            xVal++;
        } 
        else {
            if (step ==2){
                yVal++;
            } 
            else {
                if(step ==3){
                    xVal--;
                } 
                else {
                    yVal--;
                }
            }
         }
         System.out.println("(" + xVal + "," + yVal + ")");
    }
        SqrDis = Math.pow(xVal,2) + Math.pow(yVal, 2);
        System.out.println("Squared distance = " + SqrDis);
}
}

